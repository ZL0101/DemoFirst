类与对象的使用
封装的概念
继承的概念

final关键字的使用
	final在java起到类似于终结者的意思
	如果修饰到class ，代表这个class不能被继承
	(string 被final修饰，不能被继承)
	如果修饰到方法上，代表方法不能被子类覆写
	修饰常量
	
多态

	发送消息给某个对象，让对象自行决定采用哪种行为来相应消息
	子类对象的引用赋值给了父类引用变量来实现动态方法的调用
	在调用方法的时候，根据传入的参数不同，或顺序不同采取不同的实现

Java中形成多态的前提
	继承，方法重载，方法重写，向上转型
	
向上转型：
	父类的引用指向了
	
	向上转型重点是完成了数据类型的统一
	缺点：当我们子类向上转型之后，我们会发现其对象只有父类所拥有的所有方法
	而失去了子类所特有的方法。如果我们想使用子类所特有的方法，我们就需要向下转型

向下转型
	优点：让子类能够调用自己特有的方法
	
	实际上我们工作当中，一般子类不允许有自己特有的方法，但80%都是父类对象指向子类的引用 
	15%是对象本事指向对象的引用
	
需要向下转型的时候常用开发写法


通常使用instanceof关键字来判断是否属于这个类型


抽象类
1:抽象类被abstract修饰
2:抽象类肯定存在未实现的方法已经已经实现的方法
3：由于抽象类肯定存在未实现的方法，所以抽象类不能被实例化
4:抽象类也是类，所以使用子类继承抽象类，然后实例化子类对象赋值给父类的引用(向上转型)
5:抽象类虽然不能实例化对象，但是也有构造方法的存在，在实例化子类对象的同时也要先调用父类的构造方法
6：抽象类不能被final修饰，因为抽象类肯定包含抽象方法，而抽象方法，必须要依靠子类去继承，才能
实现，如果一个类被final修饰，那么这个类就不能被继承，所以抽象类不能被final修饰
7：抽象类可以拥有静态方法
8：外部抽象类不能被static修饰
内部抽象类可以被static修饰 继承时候使用外部类名.内部类名
9:构造方法是这个构造方法的最后一步，所有的属性都是在完成构造完成之后才会把值设置上去，
在类的构造方法完成之前，所有的属性只是其类型的默认值，因为回字形子类构造方法之前需要执行父类的构造方法，
在父类构造方法中调用的子类方法时候，由于还没有执行完子类构造，所以num=0
10：抽象方法不能被final static private 修饰，因为抽象方法需要被子类重写
所以不能使用final 与private 因为抽象方法没有方法体 所以无法通过类名直接调用所以不能被static修饰
如果只想执行一个类的构造方法，可以使用匿名对象new B(50);直接实例化对象，而不去接受，减少代码量
如果一个类的实例方法只想调用一次的话，可以使用匿名对象new B(50).print();

11:在系统工具类中常用的抽象类设计模式，如果一个抽象类只想让他有一个子类，并且对外部子类的实现












	
	
	
	
	
	
	
	
	
	
	
	